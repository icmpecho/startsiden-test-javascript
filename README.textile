h1. Testing javascript in webpages

So, the problem we are always facing.. How do we test javascript? and user
interface javascript at that?

This attempt at a solution uses Rhino to load webpages, and execute any javascript
in there, giving you a DOM to work with and check, triggering events on etc.

h2. Give me the gist of it

Well, we provide a simple perl-function to run a javascript file
against a content-string. That way, so long as you can get the content in a perl
scalar, you can run javascript against it. You can for instance use
Catalyst::Test, or Test::WWWW::Mechanize::Catalyst to do that, without needing to
fork a server etc.

h2. How do I test it?

There are a few things you need:

* Working Mozilla rhino
* clones or downloads of QUnit, qunit-tap and env.js
* a JSINC env var that points to directories containing the aforementioned files

h3. rhino

Well, you need rhino set up. You also need an executable script somewhere in your
PATH called rhino. Mine looks like this:

bc. #!/bin/bash
java -cp ~/Projects/js/rhino/js.jar org.mozilla.javascript.tools.shell.Main -opt -1 $@

h3. QUnit

I just cloned it to ~/Projects/js/qunit/, and added ~/Projects/js/qunit/qunit to
my JSINC.

h3. qunit-tap

I cloned this as well to ~/Projects/js/qunit-tap, and added 
~/Projects/js/qunit-tap/lib to my JSINC

h3. env.js

Envjs is a bit more pain, unless you just download env.rhino.1.2.js from 
http://www.envjs.com/dist/env.rhino.1.2.js and put it somewhere in your JSINC. 
*note*: You need to call the file env.rhino.js, without the version-info

You can also opt to clone from github, but then you need to compile the env.rhino.js

I cloned to ~/Projects/js/env-js, and added ~/Projects/js/env-js/dist to my JSINC.

h2. I got all that installed, now what?

Once that is in place, you should be able to run prove in the normal way.

bc. prove t/

If all goes well, you should see the regular test output!

